{"version":3,"sources":["themes/colors.js","components/GlobalNavigation/GlobalNavigation.styles.js","components/GlobalNavigation/routes.js","components/GlobalNavigation/GlobalNavigation.js","components/GlobalNavigation/index.js","components/common/PageWrapper/PageWrapper.styles.js","components/common/PageWrapper/index.js","components/common/PageWrapper/PageWrapper.js","pages/HomePage.js","pages/GalleryPage.js","pages/LoginPage.js","components/App/App.js","themes/fonts.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Colors","InnerWrapper","Tab","NonAuthRoutes","label","to","routes","GlobalNavigation","map","route","key","props","customStyles","PageWrapper","children","HomePage","GalleryPage","LoginPage","GlobalStyles","createGlobalStyle","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAAe,EACN,OADM,EAEN,UAFM,EAGL,UAHK,EAMD,U,6eCHP,IAAMA,EAAUC,IAAOC,IAAV,IAKEC,GAGTC,EAAeH,IAAOC,IAAV,KAUZG,EAAMJ,IAAOC,IAAV,IAKHC,GC1BE,EACP,IADO,EAEJ,WAFI,EAGN,SCEHG,EAAgB,CACpB,CACEC,MAAO,OACPC,GAAIC,GAEN,CACEF,MAAO,UACPC,GAAIC,GAEN,CACEF,MAAO,QACPC,GAAIC,ICfOC,EDmBU,WACvB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KAEIJ,EAAcK,KAAI,SAAAC,GAAK,OACrB,kBAAC,EAAD,CAAOC,IAAKD,EAAML,OAChB,kBAAC,IAAD,CAAMC,GAAII,EAAMJ,IACbI,EAAML,c,iKE1BhB,IAAMP,EAAUC,IAAOC,IAAV,KAOhB,SAAAY,GAAK,OAAIA,EAAMC,gBCPJC,ECCK,SAAC,GAAD,IAClBC,EADkB,EAClBA,SADkB,IAElBF,oBAFkB,MAEH,GAFG,SAIlB,kBAAC,EAAD,CAAWA,aAAcA,GACtBE,ICGUC,EARE,WACf,OACE,kBAAC,EAAD,mBCMWC,EARK,WAClB,OACE,kBAAC,EAAD,sBCMWC,EARG,WAChB,OACE,kBAAC,EAAD,oB,sZCQJ,IAAMpB,EAAUC,IAAOC,IAAV,IAQSC,GAGhBkB,EAAeC,YAAH,ICvBT,0BDgCInB,GE/BEoB,EFmCH,WACV,OACE,kBAAC,IAAD,CAAQC,SAAS,KACf,kBAAC,EAAD,KACE,kBAACH,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAMjB,EAAakB,UAAWT,IAC3C,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAMjB,EAAgBkB,UAAWR,IAC9C,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAMjB,EAAckB,UAAWP,OGjChCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3d9d05fd.chunk.js","sourcesContent":["export default {\n  white: '#fff',\n  black: '#050708',\n  yellow: '#fefc03',\n  lightGrey: '#d3d3d3',\n\n  anchorText: '#3cb2e3',\n}\n","import styled from 'styled-components';\nimport { Colors } from '../../themes';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n  height: 2.5em;\n\n  background-color: ${Colors.white};\n`;\n\nexport const InnerWrapper = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n\n  width: 100%;\n  max-width: 900px;\n\n`;\n\nexport const Tab = styled.div`\n  padding: 0 0.5em;\n  text-transform: capitalize;\n\n  a {\n    color: ${Colors.black};\n  }\n`;\n","export default {\n  HOME: '/',\n  GALLERY: '/gallery',\n  LOGIN: '/login',\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as S from './GlobalNavigation.styles';\nimport routes from './routes';\n\nconst NonAuthRoutes = [\n  {\n    label: 'home',\n    to: routes.HOME,\n  },\n  {\n    label: 'gallery',\n    to: routes.GALLERY,\n  },\n  {\n    label: 'login',\n    to: routes.LOGIN,\n  },\n];\n\nconst GlobalNavigation = () => {\n  return (\n    <S.Wrapper>\n      <S.InnerWrapper>\n        {\n          NonAuthRoutes.map(route => (\n            <S.Tab key={route.label}>\n              <Link to={route.to}>\n                {route.label}\n              </Link>\n            </S.Tab>\n          ))\n        }\n      </S.InnerWrapper>\n    </S.Wrapper>\n  )\n};\n\nexport default GlobalNavigation;\n","import GlobalNavigation from './GlobalNavigation';\nexport default GlobalNavigation;\n\nexport { default as routes } from './routes';\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  height: 100%;\n  width: 100vw;\n\n  ${props => props.customStyles}\n`;\n","import PageWrapper from './PageWrapper';\n\nexport default PageWrapper;\n","import React from 'react';\nimport * as S from './PageWrapper.styles';\n\nconst PageWrapper = ({\n  children,\n  customStyles = ''\n}) => (\n  <S.Wrapper customStyles={customStyles}>\n    {children}\n  </S.Wrapper>\n);\n\nexport default PageWrapper;\n","import React from 'react';\nimport { PageWrapper } from '../components/common';\n\nconst HomePage = () => {\n  return (\n    <PageWrapper>\n      home page\n    </PageWrapper>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport { PageWrapper } from '../components/common';\n\nconst GalleryPage = () => {\n  return (\n    <PageWrapper>\n      gallery page\n    </PageWrapper>\n  );\n}\n\nexport default GalleryPage;\n","import React from 'react';\nimport { PageWrapper } from '../components/common';\n\nconst LoginPage = () => {\n  return (\n    <PageWrapper>\n      login page\n    </PageWrapper>\n  );\n}\n\nexport default LoginPage;\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n} from 'react-router-dom';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { Fonts, Colors } from '../../themes';\nimport GlobalNavigation, { routes } from '../GlobalNavigation';\n\nimport HomePage from '../../pages/HomePage';\nimport GalleryPage from '../../pages/GalleryPage';\nimport LoginPage from '../../pages/LoginPage';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  min-height: 100vh;\n  height: 100%;\n  width: 100%;\n\n  background-color: ${Colors.yellow};\n`;\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: ${Fonts.family};\n    font-size: 1em;\n  }\n\n  a {\n    text-decoration: none;\n    color: ${Colors.anchorText};\n  }\n`;\n\nconst App = () => {\n  return (\n    <Router basename=\"/\">\n      <Wrapper>\n        <GlobalStyles />\n        <GlobalNavigation/>\n        <Route exact path={routes.HOME} component={HomePage}/>\n        <Route exact path={routes.GALLERY} component={GalleryPage}/>\n        <Route exact path={routes.LOGIN} component={LoginPage}/>\n      </Wrapper>\n    </Router>\n  );\n}\n\nexport default App;\n","export default {\n  family: `'Questrial', sans-serif`,\n\n}\n","import App from './App';\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}